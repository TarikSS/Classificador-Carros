# -*- coding: utf-8 -*-
"""EstudoML_Carros.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SR-6WSN-_JOnwwDLBb2K8pFGgMVXRVsu
"""

import pandas as pd
uri = "https://gist.githubusercontent.com/guilhermesilveira/4d1d4a16ccbf6ea4e0a64a38a24ec884/raw/afd05cb0c796d18f3f5a6537053ded308ba94bf7/car-prices.csv"

dados = pd.read_csv(uri)
dados.head()

mapa = {"mileage_per_year" : "milhas_por_ano", "model_year": "ano_do_carro", "price" : "preco"}

dados = dados.rename(columns = mapa)
dados.head()

dados["km_por_ano"] = dados.milhas_por_ano * 1.6
dados.head()

troca = {"yes" : 1, "no" : 0}
dados["vendido"] = dados.sold.map(troca)
dados.head()

from datetime import datetime

ano = datetime.today().year

dados["idade_do_carro"] = ano - dados.ano_do_carro
dados.head()

dados = dados.drop(columns = ["Unnamed: 0", "milhas_por_ano", "sold", "ano_do_carro"], axis=1)
dados.head()

#mudando a ordem das colunas
cols = ["idade_do_carro", "km_por_ano", "preco", "vendido"]
dados = dados[cols]
dados



from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
import numpy as np
SEED = 5
np.random.seed(SEED)

x = dados[["idade_do_carro", "km_por_ano", "preco"]]
y = dados["vendido"]

raw_treino_x, raw_teste_x, raw_treino_y, raw_teste_y = train_test_split(x, y, test_size = 0.25, stratify = y)

#melhorando as escalas
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(raw_treino_x)
teste_x = scaler.transform(raw_teste_x)
treino_x = scaler.transform(raw_treino_x)

model = SVC()
model.fit(raw_treino_x, raw_treino_y)
previsoes = model.score(raw_teste_x, raw_teste_y) *100
print (f"Usando o modelo SVC tivemos {previsoes} % de acerto")

import seaborn as sns
sns.scatterplot(x = "km_por_ano", y = "preco", hue = "vendido", data = dados)

#arvore de decisao

from sklearn.tree import DecisionTreeClassifier

modelo = DecisionTreeClassifier(max_depth=5)
modelo.fit(treino_x, raw_treino_y)
previsao = modelo.score(teste_x, raw_teste_y) *100
print (f"Usando o modelo de Árvore de Decisão tivemos {previsao:.2f} % de acerto")

#representação da arvore
from sklearn.tree import export_graphviz
import graphviz

features = x.columns
dot_data = export_graphviz(modelo, feature_names = features, rounded = True, filled = True, class_names={0: "nao", 1: "sim"})
grafico = graphviz.Source(dot_data)
grafico

